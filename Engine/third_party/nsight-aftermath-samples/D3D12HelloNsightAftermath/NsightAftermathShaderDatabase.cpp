//*********************************************************
//
// Copyright (c) 2019-2022, NVIDIA CORPORATION. All rights reserved.
// 
//  Permission is hereby granted, free of charge, to any person obtaining a
//  copy of this software and associated documentation files (the "Software"),
//  to deal in the Software without restriction, including without limitation
//  the rights to use, copy, modify, merge, publish, distribute, sublicense,
//  and/or sell copies of the Software, and to permit persons to whom the
//  Software is furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
//  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//
//*********************************************************

#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN             // Exclude rarely-used stuff from Windows headers.
#endif

#include <windows.h>

#include "d3d12.h"
#include <dxgi1_4.h>
#include <DirectXMath.h>
#include "d3dx12/d3dx12.h"

#include <string>
#include <wrl.h>
#include <shellapi.h>

#include <fstream>
#include <iomanip>

#define SHADERS_DIR ""

#include "NsightAftermathShaderDatabase.h"

#include "GFSDK_Aftermath_GpuCrashDumpDecoding.h"

//*********************************************************
// ShaderDatabase implementation
//*********************************************************

ShaderDatabase::ShaderDatabase()
    : m_shaderBinaries()
    , m_sourceShaderDebugData()
{
}

ShaderDatabase::~ShaderDatabase()
{
}

uint64_t ShaderDatabase::AddShaderBinary(const D3D12_SHADER_BYTECODE& shader)
{
  GFSDK_Aftermath_ShaderBinaryHash hash;
  AFTERMATH_CHECK_ERROR(GFSDK_Aftermath_GetShaderHash(GFSDK_Aftermath_Version_API, &shader, &hash));

  uint8_t* buff = static_cast<uint8_t*>(const_cast<void*>(shader.pShaderBytecode));
  size_t length = shader.BytecodeLength;
  std::vector<uint8_t> data(buff, buff + length);
  m_shaderBinaries[hash].swap(data);
  return hash.hash;
}

std::string ShaderDatabase::AddSourceShaderDebugData(const D3D12_SHADER_BYTECODE& shader, const void* pdb_data, size_t pdb_data_size)
{
  GFSDK_Aftermath_ShaderDebugName debug_name;
  AFTERMATH_CHECK_ERROR(GFSDK_Aftermath_GetShaderDebugName(GFSDK_Aftermath_Version_API, &shader, &debug_name));

  uint8_t* buff = static_cast<uint8_t*>(const_cast<void*>(pdb_data));
  size_t length = pdb_data_size;
  std::vector<uint8_t> data(buff, buff + length);
  m_sourceShaderDebugData[debug_name].swap(data);
  return debug_name.name;
}

// Find a shader bytecode binary by shader hash.
bool ShaderDatabase::FindShaderBinary(const GFSDK_Aftermath_ShaderBinaryHash& shaderHash, std::vector<uint8_t>& shader) const
{
    // Find shader binary data for the shader hash
    auto i_shader = m_shaderBinaries.find(shaderHash);
    if (i_shader == m_shaderBinaries.end())
    {
        // Nothing found.
        return false;
    }

    shader = i_shader->second;
    return true;
}

// Find a source shader debug info by shader debug name generated by the DXC compiler.
bool ShaderDatabase::FindSourceShaderDebugData(const GFSDK_Aftermath_ShaderDebugName& shaderDebugName, std::vector<uint8_t>& debugData) const
{
    // Find shader debug data for the shader debug name.
    auto i_data = m_sourceShaderDebugData.find(shaderDebugName);
    if (i_data == m_sourceShaderDebugData.end())
    {
        // Nothing found.
        return false;
    }

    debugData = i_data->second;
    return true;
}
