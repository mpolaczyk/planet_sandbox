
#include "object/object_registry_temp.cpp"

#include "asset/asset.h"
#include "assets/mesh.h"
#include "assets/material.h"
#include "assets/texture.h"
#include "assets/vertex_shader.h"
#include "assets/pixel_shader.h"
#include "renderer/renderer_base.h"
#include "renderers/cpu_renderer.h"
#include "renderers/cpu_renderer_reference.h"
#include "renderers/cpu_renderer_preview.h"
#include "renderers/cpu_renderer_faces.h"
#include "renderers/cpu_renderer_normals.h"
#include "renderers/gpu_renderer.h"
#include "hittables/scene.h"
#include "hittables/sphere.h"
#include "hittables/static_mesh.h"
#include "object/object.h"

#define OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(CLASS_NAME) \
  template ENGINE_API bool object_registry::add<CLASS_NAME>(CLASS_NAME* instance); \
  template ENGINE_API CLASS_NAME* object_registry::get<CLASS_NAME>(int id) const; \
  template ENGINE_API std::vector<CLASS_NAME*> object_registry::get_all_by_type<CLASS_NAME>(); \
  template ENGINE_API std::vector<const CLASS_NAME*> object_registry::get_all_by_type<const CLASS_NAME>(); \
  template ENGINE_API CLASS_NAME* object_registry::find<CLASS_NAME>(std::function<bool(CLASS_NAME*)> predicate) const; \
  template ENGINE_API const CLASS_NAME* object_registry::find<const CLASS_NAME>(std::function<bool(const CLASS_NAME*)> predicate) const; \
  template ENGINE_API std::vector<CLASS_NAME*> object_registry::find_all<CLASS_NAME>(std::function<bool(CLASS_NAME*)> predicate) const; \
  template ENGINE_API std::vector<const CLASS_NAME*> object_registry::find_all<const CLASS_NAME>(std::function<bool(const CLASS_NAME*)> predicate) const; \
  template ENGINE_API CLASS_NAME* object_registry::spawn_from_class(const class_object* type);

#define OBJECT_REGISTRY_EXPLICIT_INSTANTIATE_COPY(CLASS_NAME) \
  template ENGINE_API CLASS_NAME* object_registry::copy_shallow<CLASS_NAME>(const CLASS_NAME* source);

// Creates an instance of a class object for a given object type
#define CLASS_OBJECT_REGISTER(CLASS_NAME, PARENT_CLASS_NAME) \
  { \
    register_class(#CLASS_NAME, #PARENT_CLASS_NAME, []() -> object* { return CLASS_NAME::spawn(); }); \
  }

// FIX: This content should be automatically generated by the pre-compile script based on all the types defined in the code base
namespace engine
{
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(class_object)
  
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(asset_base)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(static_mesh_asset)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(texture_asset)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(material_asset)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(vertex_shader_asset)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(pixel_shader_asset)
  
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(renderer_base)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(cpu_renderer)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(cpu_renderer_reference)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(cpu_renderer_preview)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(cpu_renderer_faces)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(cpu_renderer_normals)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(gpu_renderer)
  
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(hittable)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(scene)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(sphere)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE(static_mesh)

  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE_COPY(asset_base)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE_COPY(static_mesh_asset)
  
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE_COPY(hittable)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE_COPY(scene)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE_COPY(sphere)
  OBJECT_REGISTRY_EXPLICIT_INSTANTIATE_COPY(static_mesh)
  
  void object_registry::create_class_objects()
  {
    CLASS_OBJECT_REGISTER(object, object)
    CLASS_OBJECT_REGISTER(class_object, object)

    CLASS_OBJECT_REGISTER(asset_base, object)
    CLASS_OBJECT_REGISTER(material_asset, asset_base)
    CLASS_OBJECT_REGISTER(texture_asset, asset_base)
    CLASS_OBJECT_REGISTER(static_mesh_asset, asset_base)
    CLASS_OBJECT_REGISTER(vertex_shader_asset, asset_base)
    CLASS_OBJECT_REGISTER(pixel_shader_asset, asset_base)
    
    CLASS_OBJECT_REGISTER(renderer_base, object)
    CLASS_OBJECT_REGISTER(cpu_renderer, renderer_base)
    CLASS_OBJECT_REGISTER(cpu_renderer_preview, cpu_renderer)
    CLASS_OBJECT_REGISTER(cpu_renderer_normals, cpu_renderer)
    CLASS_OBJECT_REGISTER(cpu_renderer_faces, cpu_renderer)
    CLASS_OBJECT_REGISTER(cpu_renderer_reference, cpu_renderer)
    CLASS_OBJECT_REGISTER(gpu_renderer, renderer_base)
    
    CLASS_OBJECT_REGISTER(hittable, object)
    CLASS_OBJECT_REGISTER(scene, hittable)
    CLASS_OBJECT_REGISTER(static_mesh, hittable)
    CLASS_OBJECT_REGISTER(sphere, hittable)
    
  }
}

#undef OBJECT_REGISTRY_EXPLICIT_INSTANTIATE
#undef CLASS_OBJECT_EXPLICIT_INSTANTIATE
#undef CLASS_OBJECT_REGISTER